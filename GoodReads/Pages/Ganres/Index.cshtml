@page
@model GoodReads.Pages.Ganres.IndexModel

@{
    ViewData["Title"] = "Genres";
}

<div class="d-flex justify-content-between align-items-center">
    <h2>Genres</h2>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addGenreModal">
        Add Genre
    </button>
</div>
<hr />

<div class="row">
    @foreach (var genre in Model.Genres)
    {
        <div class="col-md-4 mb-3">
            <a class="btn btn-outline-primary w-100" asp-page="/BookGenres/Details" asp-route-id="@genre.Id">
                @genre.GenreName
            </a>
        </div>
    }
</div>

<!-- Modal -->
<div class="modal fade" id="addGenreModal" tabindex="-1" aria-labelledby="addGenreModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addGenreModalLabel">Add New Genre</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <span class="text-danger">*</span>
                        <label asp-for="Genre.GenreName" class="control-label"></label>
                        <input asp-for="Genre.GenreName" class="form-control" />
                        <span asp-validation-for="Genre.GenreName" class="text-danger"></span>
                    </div>
                    <div class="form-group mt-3">
                        <input type="submit" value="Add Genre" class="btn btn-primary" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Include the Notification Toast Partial -->
@await Html.PartialAsync("_NotificationToastPartial")

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        function showNotification(message, type) {
            const toastElement = document.getElementById('notificationToast');
            const toastBody = document.querySelector('#notificationToast .toast-body');

            // Remove existing color classes
            toastElement.classList.remove('text-bg-danger', 'text-bg-success');

            // Add the appropriate color class based on the type
            if (type === 'success') {
                toastElement.classList.add('text-bg-success');
            } else {
                toastElement.classList.add('text-bg-danger');
            }

            toastBody.innerText = message || 'An error occurred.';

            const toast = new bootstrap.Toast(toastElement);
            toastElement.style.display = 'block';
            toast.show();
        }

        document.addEventListener("DOMContentLoaded", function () {
            const errorMessage = "@TempData["ErrorMessage"]";
            const successMessage = "@TempData["SuccessMessage"]";

            if (errorMessage) {
                showNotification(errorMessage, 'error');
            } else if (successMessage) {
                showNotification(successMessage, 'success');
            }
        });
    </script>
}
